name: Test and build

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  S3_PYPI_HOST: hyp3-pypi-west.s3-website-us-west-2.amazonaws.com
  S3_PYPI_BUCKET: hyp3-pypi-west
  AWS_REGION: us-west-2
  AWS_ACCESS_KEY_ID: ${{ secrets.V2_AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.V2_AWS_SECRET_ACCESS_KEY }}

jobs:
  pytest:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9]

    steps:
      - uses: actions/checkout@v2

      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
          activate-environment: asf-tools
          environment-file: conda-env.yml

      - name: Pytest in conda environment
        shell: bash -l {0}
        run: |
          python -m pip install .[develop]
          pytest --cov=asf_tools

      - name: Safety analysis of conda environment
        shell: bash -l {0}
        run: |
          python -m pip freeze | safety check --full-report --stdin
          conda list --export | awk -F '=' '/^[^#]/ {print $1 "==" $2}' | safety check --full-report --stdin


  package:
    runs-on: ubuntu-latest
    needs: pytest
    outputs:
      SDIST_VERSION:  ${{ steps.build.outputs.version }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{ secrets.TOOLS_BOT_PAK }}

      - name: Get associated PR
        if: github.ref == 'refs/heads/main'
        uses: helaili/github-graphql-action@2.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.TOOLS_BOT_PAK }}
        with:
          query: .github/queries/asssociated-pr.query.yml
          outputFile: pr.json
          owner: ASFHyP3
          name: asf-tools
          sha: ${{ github.sha }}

      - name: Get PR labels
        if: github.ref == 'refs/heads/main'
        uses: helaili/github-graphql-action@2.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.TOOLS_BOT_PAK }}
        with:
          query: .github/queries/pr-labels.query.yml
          outputFile: labels.json
          owner: ASFHyP3
          name: asf-tools

      - name: Upload a Build Artifact
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v2
        with:
          name: query-responces
          path: '*.json'

      - uses: actions/setup-python@v1
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade setuptools wheel twine s3pypi "setuptools-scm[toml]" importlib_metadata
          python -m pip install bump2version

      - name: Tag version
        if: github.ref == 'refs/heads/main'
        run: |
          git fetch origin +refs/tags/*:refs/tags/*
          git config user.email "UAF-asf-apd@alaska.edu"
          git config user.name "tools-bot"

          LABEL_QUERY='.data.repository.pullRequest.labels.nodes[].name'
          SELECT='select(. == "major" or . == "minor" or . == "patch")'
          BUMP_PART=$(jq --raw-output  "${LABEL_QUERY} | ${SELECT}" labels.json | sort | head -1)

          PR_QUERY='.data.repository.commit.associatedPullRequests.edges[0].node.title'
          TAG_MSG=$(jq --raw-output "${PR_QUERY}"  pr.json)

          bump2version --current-version $(git describe --abbrev=0) \
              --tag --tag-message "${TAG_MSG}" "${BUMP_PART}"

          git push --tags
          echo "Tagged version $(git describe --abbrev=0) and pushed back to repo"

      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build distribuion and upload to S3-PyPI
        id: build
        run: |
          git fetch origin +refs/tags/*:refs/tags/*
          export SDIST_VERSION=$(python setup.py --version)
          echo "::set-output name=version::${SDIST_VERSION}"
          python setup.py sdist bdist_wheel
          echo "Uploading version ${SDIST_VERSION} to ${S3_PYPI_BUCKET}"
          s3pypi --bucket ${S3_PYPI_BUCKET} --private --force --verbose

      - name: Upload to PyPI.org
        if: github.ref == 'refs/heads/master'
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.TOOLS_PYPI_PAK }}


  verify-packaging:
    runs-on: ubuntu-latest
    needs: package
    steps:
      - uses: actions/checkout@v2

      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: 3.8
          activate-environment: asf-tools
          environment-file: conda-env.yml

      - name: Pip install ${{ needs.package.outputs.SDIST_VERSION }}
        shell: bash -l {0}
        run: |
          export SDIST_VERSION=${{ needs.package.outputs.SDIST_VERSION }}
          python -m pip install asf_tools==${SDIST_VERSION} \
              --trusted-host "${S3_PYPI_HOST}" \
              --extra-index-url "http://${S3_PYPI_HOST}"
